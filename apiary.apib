FORMAT: 1A
HOST: http://ed2016.vts.it/

# ED

Service Oriented Architecture specified for the ED project.


#######################
# Group Profiles
#######################

Resources related to user's profile in the API.

## Profiles collections [/profiles{?orgType}{?searchType}{?searchValue}{?page}{?pageSize}{?sort}{?sortOrder}]

+ Attributes (object)
    + results (array[Profile1, Profile2, Profile3], required) - array of profiles
    + Include PaginationData
    
### List Profiles [GET]
Search user profiles.

+ Parameters
    + searchType: lname (enum[string]) - Field to filter
        + Members
            + lname
            + fname
            + email
            + dname
            + dcode
    + searchValue: BIANCHI (string) - Value to search
    + orgType: UO (string) - Structure type to filter for
    + page: 1 (optional, number) - The page of profiles to return
    + sort: fname (enum[string], optional) - Sorting field
        + Members
            + lname
            + fname
            + dname
            + country
    + sortOrder: asc (enum, optional) - Sorting order
        + Members
            + asc
            + desc
    + pageSize: 25 (optional, number) - Amount of results to return

+ Response 200 (application/json)

    + Attributes (Profiles collections)

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Profile [POST]

Creates a user profile. 

**Released on Mar 03**

+ Request (application/json)

    + Attributes (ProfileMini)

+ Response 200 

+ Response 400
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body


## DRAFT Search [/profiles/advancedSearch]



### DRAFT Advanced Search [POST]

+ Request (application/json)

    + Attributes (SearchObject)

+ Response 200 (application/json)

    + Attributes (Profiles collections)

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body



## Profile [/profiles/{id}]

+ Parameters
    + id: 1 (required, number) - id of the user

+ Attributes (ProfileDetail)

### Read Profile [GET]

+ Response 200 (application/json)

    + Attributes (Profile)

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body


### Update Profile [PUT]

Updates a user profiles. This actions takes an object composed by the base
profile, its informations and its addresses and updates everything in one single
swoop instead of having three different calls.

+ Request (application/json)

    + Attributes (ProfileBase)

+ Response 200

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Dismiss Profile [PUT /profiles/{id}/dismiss]

Dismiss the specified user profile.
This actions is a specialized version of an update on the specified profile.


+ Parameters
    + id: 1 (required, number) - id of the user

+ Request (application/json)
  + Attributes
      + date: `2016-03-31`
    
+ Response 200

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Profile [DELETE]

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### DRAFT Same Manager [GET /profiles/{id}/sameManager{?page}{?pageSize}{?sort}{?sortOrder}]

Return all the people who are managed by the same manager of the person with id== **id** .

+ Parameters
    + id: 1 (required, number) - id of the user
    + page: 1 (optional, number) - The page of profiles to return
    + sort: fname (enum[string], optional) - Sorting field
        + Members
            + lname
            + fname
            + dname
            + country
    + sortOrder: asc (enum, optional) - Sorting order
        + Members
            + asc
            + desc
    + pageSize: 25 (optional, number) - Amount of results to return

+ Response 200 (application/json)

    + Attributes (Profiles collections)

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### DRAFT People Managed [GET /profiles/{id}/peopleManaged{?page}{?pageSize}{?sort}{?sortOrder}]

Return all the people who are managed the manager with id== **id** .

+ Parameters
    + id: 1 (required, number) - id of the user
    + page: 1 (optional, number) - The page of profiles to return
    + sort: fname (enum[string], optional) - Sorting field
        + Members
            + lname
            + fname
            + dname
            + country
    + sortOrder: asc (enum, optional) - Sorting order
        + Members
            + asc
            + desc
    + pageSize: 25 (optional, number) - Amount of results to return

+ Response 200 (application/json)

    + Attributes (Profiles collections)

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    

## User personal Profile [/profiles/my]

### Read Profile [GET]

Used to retrieve user personal details.

+ Response 200 (application/json)
  + Attributes (Profile)

+ Response 404
    Returned when the user is not authenticated.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body


### Update Profile [PUT]

Updates user personal profile. 

+ Request (application/json)

    + Attributes (ProfileBase)

+ Response 200

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## Profile Photo [/profiles/{id}/photo]

+ Parameters
    + id: 1 (required, number) - id of the user

### Read Profile Photo [GET]

Returns the specified user's photo.

**Released on feb 29**

+ Response 200 (application/png)

+ Response 404
    Returned when the user's photo cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## User personal Profile Photo [/profiles/my/photo]

### Read Profile Photo [GET]

Returns the current user's photo.

**Released on feb 29**

+ Response 200 (application/png)

+ Response 404
    Returned when the user's photo cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Upsert Profile Photo [POST]

**Released on Mar 02**

Creates or updates the current user's photo.

+ Request (application/png)

+ Response 200

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## Profiles Types collections [/profiles/types]

+ Attributes (object)
  + results (array, required) - array of resources
      + (object)
          + id: ASG
          + descr: IBM Assigned
      + (object)
          + id: UBD
          + descr: UBIS Delegates
      + (object)
          + id: EXT
          + descr: Extended Team IBM
  + Include PaginationData

### List types [GET]
The list of types of employee. (HR Admin - People modify)

+ Response 200 (application/json)
  + Attributes (Profiles Types collections)
  

## Profiles roles collections [/profiles/roles]

+ Attributes (object)
  + results (array, required) - array of resources
      + (object)
          + id: 1
          + descr: ADMIN
      + (object)
          + id: 2
          + descr: ND
      + (object)
          + id: 3
          + descr: RCM
      + (object)
          + id: 8
          + descr: USER
  + Include PaginationData


### List types [GET]

The list of user's roles. (HR Admin)

+ Response 200 (application/json)
  + Attributes (Profiles roles collections)

#######################
# Group Organizations
#######################

## Organization types collections [/organizations/types]

+ Attributes (object)
  + results (array, required) - array of resources
      + (object)
          + id: 1
          + descr: Business
      + (object)
          + id: 2
          + descr: Maintenance
      + (object)
          + id: 3
          + descr: Other
  + Include PaginationData

### List types [GET]
The list of structure types. (Hierarchical View - List Organization, Homepage)
+ Response 200 (application/json)
  + Attributes (Organization types collections)

#######################
# Group Organization Units
#######################


## Organization Units collections [/ous{?page}{?sort}{?pageSize}]

+ Parameters
  + page: 1 (optional, number) - The page of results to return
  + sort: firstName (optional) - Sorting order
  + pageSize: 25 (optional, number) - Amount of results to return

+ Attributes (object)
  + results (array[Organization1, Organization2, Organization3], required) - array of first-level organizations
  + Include PaginationData

### List Organization Units [GET]
Returns the company's organization structure tree.

**Released on feb 29**

+ Response 200 (application/json)
  + Attributes (Organization Units collections)


#######################
# Group Countries
#######################


## Countries collections [/countries]

+ Attributes (object)
  + results (array, required) - array of resources
      + (object)
          + id: 1
          + descr: Italy
      + (object)
          + id: 2
          + descr: Germany
      + (object)
          + id: 3
          + descr: Austria
      + (object)
          + id: 4
          + descr: Spain
  + Include PaginationData


### List countries [GET]

The list countries. (HR Admin - People insert, HR Admin - People modify)

+ Response 200 (application/json)
  + Attributes (Countries collections)


#######################
# Group General Messages
#######################

## General Messages [/generalMessages]

+ Attributes (object)
    + availabilityAlert (object)
        + firstRow: `first row alert` (string)
        + secondRow: `second row alert` (string)
    + newRelease (object)
        + firstRow: `first row release` (string)
        + secondRow: `second row release` (string)

### Read general messages [GET]
Get the general message.
+ Response 200 (application/json)
    + Attributes (General Messages)

### Update general messages [PUT]
Update the general message with a new one.
+ Request (application/json)
    + Attributes (General Messages)

+ Response 200

#######################
# Group Support Requests
#######################

## Support Requests Collection [/supportRequests{?page}{?sort}{?pageSize}]

+ Parameters
  + page: 1 (optional, number) - The page of results to return
  + sort: firstName (optional) - Sorting order
  + pageSize: 25 (optional, number) - Amount of results to return

+ Attributes (object)
  + results (array[Support Request Closed, Support Request Open, Support Request Assigned], required)
  + Include PaginationData

### Support requests list [GET]
Get the list with all the support requests.

+ Response 200 (application/json)
    + Attributes (Support Requests Collection)

## Support Request [/supportRequests/{id}]

+ Parameters
    + id: 1 (required, number) - id of the request

+ Attributes (object)
    + id: 1 (required, number)
    + status: `Open` (enum[string],required)
        + Members
            + `Open`
            + `Assigned`
            + `Closed`
            + `Force closed`
    + requestor (object)
        + id: 3231 (required, number)
        + lastName: `Baggio` (required, string)
        + firstName: `Alessandro` (required, string)
    + date: `10/12/2015 12:12:10` (required, string)
    + type: `EntDirectory` (string)
    + title: `titolo blablablablabla` (required, string)
    + description: `descrizione blablablablablablablabla` (required, string)
    + closureDate (string)
    + documents (array)
        + `http://url.doc.1`
        + `http://url.doc.2`
        + `http://url.doc.3`

### Support request Detail [GET]
Get the detail of a support requests.
+ Response 200 (application/json)
    + Attributes (Support Request)

### Support requests update [POST]
Update a support requests (assign, close, force close,...).
+ Request (application/json)
    + Attributes (Support Request)
    
+ Response 200 (application/json)
    + Attributes (Support Request Detail Assigned)
    

## DRAFT - Documents Modify [/supportRequests/{id}/document]
+ Parameters
    + id: 1 (required, number) - id of the request
    
+ Attributes (Support Request Document Upload)

### Support request Document Upload [PUT]
Allow you to upload a new document for a support request
+ Request (application/json)
    + Attributes (Support Request Document Upload)

+ Response 200 (application/json)
    + Attributes (object)
        + id: 1 (required, number) - the id of the request
        + documents (array) - the new array of documents
            + `http://url.doc.1`
            + `http://url.doc.2`
            + `http://url.doc.3`
            + `http://url.doc.4`


### Support request Document Remove [POST]
Allow you to remove a support request's document
+ Request (application/json)
    + Attributes (Support Request Document Remove)

+ Response 200 (application/json)
    + Attributes (object)
        + id: 1 (required, number) - the id of the request
        + documents (array) - the new array of documents
            + `http://url.doc.1`
            + `http://url.doc.2`


+ Response 200 


#######################
# Group DRAFT - Configuration
#######################

This returns the application configuration. 
We keep this here for now just for documentation purpose,
it shouldn't be part of the API.

## Configuration [/configuration]

+ Attributes (object)
    + baseUrl: `http://private-bc401d-ed2016.apiary-mock.com` (string)

### Base URL configuration [GET]
Get the base URL configuration

+ Response 200 (application/json)
    + Attributes (Configuration)






# Data Structures

## PaginationData (object)
+ paginationData (object, required) - Informations required for pagination
    + count: 62 (number,required) - total number of resources
    + pageNum: 1 (number, required) - slice of resources returned
    + pageSize: 25 (number, required) - size of the slice

## ProfileBase (object)
+ firstName: `MARIO` (required, string)
+ lastName: `BIANCHI` (required, string)
+ ouCode: `XL78481` (required, string)
+ ouDescr: `C-BOM` (required, string)
+ email: `mbianchi@acme.it` (required, string)
+ profession: `Senior Developer` (required, string)
+ isManager: `true`
+ phone (object)
    + country: 39
    + prefix: `011`
    + number: `12345678` (string)
+ mobilePhone (object)
    + country: `39`
    + prefix: `335`
    + number: `1234567` (string)
+ fax (object)
    + country: `39` (string)
    + prefix: `02` (string)
    + number: `3904912345678` (string)
+ businessUnit: `not used ?`,
+ jobResponsibility: `job responsibility`,
+ altInternetAddress: `firstname.lastname@organization2.com`
+ notesAddress: `indirizzo_notes@aaaaa.it`
+ userId: `userid` (string) - login user (read only?)
+ otherRoles: `????` (string)
+ employeeType: `EMP` (string) - code of profile type
+ personalCode: `one more data` (string)

## ProfileMini (object)
+ firstName: `MARIO` (required, string)
+ lastName: `BIANCHI` (required, string)
+ email: `mbianchi@acme.it` (required, string)
+ addresses
    + business (ProfileAddressCountry) - business address of the user.
+ userId: `userid` (string) - login user (read only?)
+ employeeType: `EMP` (string) - code of profile type
+ personalCode: `one more data` (string)
+ hiringDate: `2016-02-28` (string)

## ProfileDetail (ProfileBase)
+ Include ProfileInformations
+ Include ProfilesAddresses

## Profile1 (ProfileBase)
+ id: 1 (number) - id of the profile

## Profile2 (ProfileBase)
+ id: 2 (number) - id of the profile

## Profile3 (ProfileBase)
+ id: 3 (number) - id of the profile

## ProfileInformations (object)
+ informations
    + expertiseSummary: `expertise summary text`
    + certification: `certifications text`
    + generalExperienceBusiness: `business experience text`
    + generalExperienceIndustry: `industry experience text`
    + generalExperienceCustomer: `customer experience text`
    + technicalExperience: `industry experience text`
    + solutionsProducts: `solutions products text`
    + communities: `communities text`
    + businessGoals: `business goals text`
    + professionalOrganizations: `professional organizations text`
    + projects: `projects text`
    + team: `team text`

## ProfilesAddresses (object)
+ addresses
    + preferred (ProfileAddress) - preferred address of the user, if different from business address.
    + business (ProfileAddress) - business address of the user.

## ProfileAddress
+ street: Via Nizza 15
+ city: Torino
+ country: Italy
+ zip: 12345

## ProfileAddressCountry
+ country: Italy

## Organization1 (object)
+ ouCode:`XL9875`
+ ouName:`organization name 1`
+ people (array[Person1,Person2], optional)
+ parentId

## Organization2 (object)
+ ouCode:`XL8654`
+ ouName:`organization name 2`
+ people (array[Person3], optional)
+ parentId: `XL9875`

## Organization3 (object)
+ ouCode:`XL9352`
+ ouName:`organization name 1`
+ people (array[Person4,Person5], optional)
+ parentId: `XL9875`

##Person1 (object)
+ id: 1 (required, number)
+ lastName: `Linzi` (required, string)
+ firstName: `Giovanni` (required, string)
+ isManager: true (boolean)

##Person2 (object)
+ id: 2 (required, number)
+ lastName: `Linzi` (required, string)
+ firstName: `Giovanni` (required, string)
+ isManager: false (boolean)

##Person3 (object)
+ id: 3 (required, number)
+ lastName: `Signori` (required, string)
+ firstName: `Marco` (required, string)
+ isManager: true (boolean)

##Person4 (object)
+ id: 4 (required, number)
+ lastName: `Moretto` (required, string)
+ firstName: `Alberto` (required, string)
+ isManager: true (boolean)

##Person5 (object)
+ id: 5 (required, number)
+ lastName: `Tessarolo` (required, string)
+ firstName: `Giovanni` (required, string)
+ isManager: false (boolean)

##Support Request Closed (object)
+ id: 1 (required, number)
+ status: `Closed`
+ date: `10/12/2015 12:12:10` (required, string)
+ title: `titolo bla` (string)
+ closureDate: `15/12/2015 13:13:13` (string)
+ assignedTo (object)
    + id: 323 (required, number)
    + lastName: `Ferraro` (required, string)
    + firstName: `Alberto` (required, string)

##Support Request Open (object)
+ id: 2 (required, number)
+ status: `Open`
+ date: `10/12/2015 12:12:10` (required, string)
+ title: `titolo blablaaaaaablablabla` (string)
+ assignedTo (object)

##Support Request Assigned (object)
+ id: 3 (required, number)
+ status: `Assigned`
+ date: `10/12/2015 12:12:10` (required, string)
+ title: `titolo blablablablablwfwfwefa` (string)
+ assignedDate: `12/12/2015 12:22:12` (string)
+ assignedTo (object)
    + id: 323 (required, number)
    + lastName: `Ferraro` (required, string)
    + firstName: `Andrea` (required, string)
    + email: `fAlberto@email.it` (required, string)

##Support Request Update (object)
+ id: 1 (required, number) - id of the request that you wants to update
+ status: `Closed`
+ requestor (object)
    + id: 321 (required, number)
    + lastName: `Baggio` (required, string)
    + firstName: `Alessandro` (required, string)
+ date: `10/12/2015 12:12:10` (required, string)
+ type: `EntDirect` (string)
+ title: `titolo blablablablabla` (string)
+ description: `descrizione blablablablablablablabla` (string)
+ assignedTo (object)
    + id: 323 (required, number)
    + lastName: `Ferraro` (required, string)
    + firstName: `Alberto` (required, string)
    + email: `fAlberto@email.it` (required, string)

##Support Request Document Upload (object)
+ id: 1 (required, number) - id of the request that you wants to modify
+ document: `` (string) - base64 file to upload a document

##Support Request Document Remove (object)
+ id: 1 (required, number) - id of the request that you wants to modify
+ removeDocuments (array[string]) - array with documents to remove
    + `http://url.doc.3`

##Support Request Detail Assigned (object)
+ id: 1 (required, number)
+ status: Assigned (required, enum[string])
    + Members
        + Assigned
        + Closed
        + Force closed
        + Open
+ requestor (object)
    + id: 321 (required, number)
    + lastName: `Baggio` (required, string)
    + firstName: `Alessandro` (required, string)
+ date: `10/12/2015 12:12:10` (required, string)
+ type: `EntDirect` (string)
+ title: `titolo blablablablabla` (required, string)
+ description: `descrizione blablablablablablablabla` (required, string)
+ assignedDate: `12/12/2015 12:22:12` (string)
+ assignedTo (object)
    + id: 323 (required, number)
    + lastName: `Ferraro` (required, string)
    + firstName: `Alberto` (required, string)
    + email: `fAlberto@email.it` (required, string)
+ closureDate (string)
+ documents (array)
    + `http://url.doc.1`
    + `http://url.doc.2`
    + `http://url.doc.3`

## SearchObject (object)
+ Include SearchQuery
+ orgType: UO (string, optional) - Structure type to filter for
+ page: 1 (optional, number) - The page of profiles to return
+ sort: fname (enum[string], optional) - Sorting field
    + Members
        + lname
        + fname
        + dname
        + country
+ sortOrder: asc (enum, optional) - Sorting order
    + Members
        + asc
        + desc
+ pageSize: 25 (optional, number) - Amount of results to return

## SearchQuery (object)
+ searchQuery (object, required)
    + and (array[AndQuery1, AndQuery2, AndQuery3, AndQuery4, AndQuery5, AndQuery6], required)

## AndQuery1 (object)
+ or (array[OrQuery1, OrQuery2])

## OrQuery1 (object)
+ id: 12

## OrQuery2 (object)
+ id: 32

# AndQuery2 (object)
+ lname: Rossi (string)


# AndQuery3 (object)
+ fname: Mario (string)


# AndQuery4 (object)
+ email: mrossi@ibm.it (string)


# AndQuery5 (object)
+ dcode: XL1231 (string)


# AndQuery6 (object)
+ dname: Austria CEO (string)