FORMAT: 1A
HOST: http://ed2016.vts.it/

# ED

Service Oriented Architecture specified for the ED project.

#######################
# Group 01 - Profiles
#######################

Resources related to user's profile in the API.

## Profiles collections [/profiles{?orgType}{?searchType}{?searchValue}{?page}]

+ Attributes
    + profiles (array[ProfileResult1,ProfileResult2,ProfileResult3], required) - array of profiles
    + count: 3 (number, required) - total number of resources fetched by the query.

### List Profiles [GET]
Search user profiles.

+ Parameters
    + searchType: lname (enum[string]) - Field to filter
        + Members
            + lname
            + fname
            + email
            + dname
            + dcode
    + searchValue: BIANCHI (string) - value to search
    + orgType: UO (string) - Codice tipo struttura da filtrare
    + page: 1 (optional, number) - The page of profiles to return

+ Response 200 (application/json)

    + Attributes (Profiles collections)

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## Profile [/profiles/{id}]

+ Parameters
    + id: 1 (required, number) - ID of the user

+ Attributes (ProfileDetail)

### Read Profile [GET]

+ Response 200 (application/json)

    + Attributes (Profile)

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Update Profile [PUT]

+ Request (application/json)

    + Attributes (Profile Update)

+ Response 200

+ Response 400
    Returned when input does not pass validation.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Profile [DELETE]

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

## User personal profile [/profiles/my]

Used to retrieve user personal details.

### Read Profile [GET]

+ Response 200 (application/json)
  + Attributes (Profile)

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

#######################
# Group 02 - Fields details
#######################

## Organization types collections [/fieldsDetail/organizationTypes]

+ Attributes (array)
  + Business
  + Manteinance
  + Other

### List types [GET]

+ Response 200 (application/json)
  + Attributes (Employee types collections)


## Employee types collections [/fieldsDetail/employeeTypes]

+ Attributes (array)
  + EmployeeType1
  + EmployeeType2
  + EmployeeType3

### List types [GET]

+ Response 200 (application/json)
  + Attributes (Employee types collections)


## Countries collections [/fieldsDetail/countries]

+ Attributes (array)
  + Italy
  + Germany
  + Austria
  + Spain

### List types [GET]

+ Response 200 (application/json)
  + Attributes (Countries collections)


## User role collections [/fieldsDetail/userRoles]

+ Attributes (array)
  + User role 1
  + User role 2
  + User role 3
  + User role 4

### List types [GET]

+ Response 200 (application/json)
  + Attributes (User role collections)


## Organization unit collections [/fieldsDetail/organizationUnit]

+ Attributes (array)
  + Organization unit 1
  + Organization unit 2
  + Organization unit 3
  + Organization unit 4

### List types [GET]

+ Response 200 (application/json)
  + Attributes (Organization unit collections)

## Structure type collections [/fieldsDetail/structureTypes]

+ Attributes (array)
  + Structure type 1
  + Structure type 2
  + Structure type 3
  + Structure type 4

### List types [GET]

+ Response 200 (application/json)
  + Attributes (Structure type collections)


#######################
# Group 03 - Business organization tree
#######################

## Business tree [/businessTree]

+ Attributes
    + organizations (array[Organization1,Organization2], required) - array of first-level organizations

### Business tree [GET]

+ Response 200 (application/json)
  + Attributes (Business tree)



# Data Structures

## ProfileResult1 (object)
+ id: 1 (required, number) - ID of the profile
+ firstName: `MARIO` (required, string)
+ lastName: `BIANCHI` (required, string)
+ ouCode: `XL78481` (required, string)
+ ouDescr: `C-BOM` (required, string)
+ officeNumber: `B101` (string)
+ email: `mbianchi@acme.it` (required, string)
+ country: `Italy` (string)
+ imageUrl: `http://url.of.image/image1.png`

## ProfileResult2 (object)
+ id: 2 (required, number) - ID of the profile
+ firstName: `ROSA`
+ lastName: `BIANCHI`
+ ouCode: `XL78439`
+ ouDescr: `Service Management`
+ officeNumber: `B103` (string)
+ email: `rbianchi@acme.it`
+ country: `Austria`
+ imageUrl: `http://url.of.image/image2.png`

## ProfileResult3 (object)
+ id: 3 (required, number) - ID of the profile
+ firstName: `PAOLO`
+ lastName: `BIANCHI`
+ ouCode `XJ99196`
+ ouDescr: `Open Special Support AT`
+ officeNumber: `B205` (string)
+ email: `pbianchi@acme.it`
+ country: `Germany`
+ imageUrl: `http://url.of.image/image3.png`

## Address (object)
- street: Via Nizza 15
- city: Torino
- country: Italy
- zip: 12345

## ProfileDetail (object)
+ id: 1 (required, number) - ID of the profile
+ firstName: `MARIO` (required, string)
+ lastName: `BIANCHI` (required, string)
+ ouCode: `XL78481` (required, string)
+ ouDescr: `C-BOM` (required, string)
+ email: `mbianchi@acme.it` (required, string)
+ profession: `Senior Developer` (required, string)
+ ismanager: `true`
+ phone (object)
    + country: 39
    + prefix: `011`
    + number: `12345678` (string)
+ mobilePhone (object)
    + country: `39`
    + prefix: `335`
    + number: `1234567` (string)
+ fax (object)
    + country: `39` (string)
    + prefix: `02` (string)
    + number: `3904912345678` (string)
+ address (Address)
+ imageUrl: `http://url.of.image/image.png`
+ businessUnit: `not used ?`,
+ jobResponsibility: `my job responsibility bla bla`
+ internetAddress: `firstname.lastname@organization.com`
+ altInternetAddress: `firstname.lastname@organization2.com`
+ notesAddress: `indirizzo_notes@aaaaa.it`
+ userId: `????`
+ preferedAddress (Address)
+ businessAddress (Address)
+ expertiseSummary: `expertise summary text` (string)
+ certifications: `certifications text` (string)
+ experienceGeneral (object)
    + business: `business experience text` (string)
    + industry: `industry experience text` (string)
    + customer: `customer experience text` (string)
+ technicalExperience: `industry experience text` (string)
+ solutionsProducts: `solutions products text` (string)
+ communities: `communities text` (string)
+ businessGoals: `business goals text` (string)
+ professionalOrganizations: `professional organizations text` (string)
+ projects: `projects text` (string)
+ team: `team text` (string)
+ otherRoles: `????` (string)

## Profile Update (object)
+ Include Profile
+ image: `R0lGODlhEAAOALMAAOazToeHh0tLS/7LZv/0jvb29t/f3//Ub//ge8WSLf/rhf/3kdbW1mxsbP//mf///yH5BAAAAAAAL` (string) - serialized stream (base64) representing the image.

## Organization1 (object)
+ ouCode:`XL9875`
+ ouName:`organization name 1`
+ people (array[Person1,Person2], optional)
+ subOrganizations (array[])

## Organization2 (object)
+ ouCode:`XL8654`
+ ouName:`organization name 2`
+ people (array[Person3], optional)
+ subOrganizations (array[Organization2_1])

## Organization2_1 (object)
+ ouCode:`XL9352`
+ ouName:`organization name 1`
+ people (array[Person4,Person5], optional)
+ subOrganizations (array[], optional)

##Person1 (object)
+ id: 1 (required, number)
+ lastName: `Linzi` (required, string)
+ firstName: `Giovanni` (required, string)
+ isManager: true (boolean)

##Person2 (object)
+ id: 2 (required, number)
+ lastName: `Linzi` (required, string)
+ firstName: `Giovanni` (required, string)
+ isManager: false (boolean)

##Person3 (object)
+ id: 3 (required, number)
+ lastName: `Signori` (required, string)
+ firstName: `Marco` (required, string)
+ isManager: true (boolean)

##Person4 (object)
+ id: 4 (required, number)
+ lastName: `Moretto` (required, string)
+ firstName: `Alberto` (required, string)
+ isManager: true (boolean)

##Person5 (object)
+ id: 5 (required, number)
+ lastName: `Tessarolo` (required, string)
+ firstName: `Giovanni` (required, string)
+ isManager: false (boolean)